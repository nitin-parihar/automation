name: Azure VM SSH Login and Deploy Symphony

on:
  workflow_dispatch:  # This allows manual triggering of the workflow
  push:
    branches:
      - TestAutomation  # This workflow will still be triggered on pushes to the `TestAutomation` branch

env:
  VM_HOST: "52.224.241.180"
  VM_USER: "azureuser"
  VM_PASS: "Margo@123456"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure VM using SSH
        run: |
          echo "Trying to SSH to $VM_USER@$VM_HOST"
          sudo apt-get install sshpass -y
          sshpass -p "$VM_PASS" ssh -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" <<EOF
            echo "Logged in successfully to Azure VM."

            
      # Now running Symphony API setup on the VM
      
      - name: Set up Rust
        run: |
               curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
               
      - name: Set up Rust
        run: |
          whoami
          pwd
          ls -ld /home/$VM_USER
               
      - name: Clone Symphony repo
        shell: bash
        run: |
          set -e
            echo "Cloning Symphony repo..."
            
            git clone https://github.com/eclipse-symphony/symphony.git /home/$VM_USER/symphony
            echo "Directory structure of symphony repo:"
            ls -laR /home/$VM_USER/symphony
            # Build Rust Library
            RUST_DIR="/home/$VM_USER/symphony/api/pkg/apis/v1alpha1/providers/target/rust"
            if [ -d "$RUST_DIR" ]; then
              echo "Rust directory found. Building Rust library..."
              cd "$RUST_DIR"
              cargo build --release
            else
              echo "Rust directory not found. Skipping Rust build."
            fi
            
      - name: Build Go binary
        shell: bash
        run: |
          set -e
            GO_DIR="/home/$VM_USER/symphony/api"
            if [ -d "$GO_DIR" ]; then
              echo "Go directory found. Building Go binary..."
              export LD_LIBRARY_PATH=/home/$VM_USER/symphony/api/pkg/apis/v1alpha1/providers/target/rust/target/release
              cd "$GO_DIR"
              go build -o symphony-api
            else
              echo "Go directory not found. Skipping Go build."
            fi
            
      - name: Run symphony-api
        shell: bash
        run: |
          set -e
            API_BIN="/home/$VM_USER/symphony/api/symphony-api"
            if [ -f "$API_BIN" ]; then
              echo "Starting symphony-api in background..."
              nohup env SYMPHONY_API_URL="http://localhost:8082/v1alpha2/" USE_SERVICE_ACCOUNT_TOKENS="false" \
                $API_BIN -c /home/$VM_USER/symphony/api/symphony-api-no-k8s.json -l Debug > /home/$VM_USER/symphony-api.log 2>&1 &
              echo "symphony-api started in background."
            else
              echo "symphony-api binary not found. Skipping startup."
            fi
            # Check if log file exists
            if [ -f "/home/$VM_USER/symphony-api.log" ]; then
              echo "Log file created."
            else
              echo "Log file not found."
            fi
          EOF

      # Optional: Do not include any cleanup actions here if you don't want anything removed
      - name: Upload Symphony API log
        uses: actions/upload-artifact@v4
        with:
          name: symphony-api-log
          path: /home/$VM_USER/symphony-api.log
